/* eslint-disable @typescript-eslint/no-floating-promises */
import { Composer, Markup, Scenes, session, Telegraf } from 'telegraf'
import { user } from './models/user'

const Wallet = (bot) => {
const stepHandler = new Composer<Scenes.WizardContext>()

let sum = 0

stepHandler.on('text', async (ctx) => {
  sum = Number(ctx.message.text.split(',')[0].split('.')[0].replace(/[^0-9]/g,""))
  const amount = Number(sum+'00')
  
  const invoice = {
    provider_token: process.env.PROVIDER_TOKEN,
    start_parameter: 'time-machine-sku',
    title: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞',
    description: '–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –µ–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–∞—Ö –±–æ—Ç–∞',
    currency: 'rub',
    photo_url: 'https://img.clipartfest.com/5a7f4b14461d1ab2caaa656bcee42aeb_future-me-fredo-and-pidjin-the-webcomic-time-travel-cartoon_390-240.png',
    is_flexible: false,
    prices: [
      { label: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞', amount: amount },
    ],
    payload: JSON.stringify({
      coupon: ''
    })
  }
  
  const replyOptions = Markup.inlineKeyboard([
    Markup.button.pay('üí∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'),
  ])

  if ( sum >= 100 ){
    await ctx.replyWithInvoice(invoice, replyOptions)
    return await ctx.scene.leave()
  }else{
    await ctx.reply('–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 100 –¥–æ 10 000 —Ä.')
  }
})

const walletScene = new Scenes.WizardScene(
  'wallet-scene',
  async (ctx) => {
    await ctx.reply(
      '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 100 –¥–æ 10 000 —Ä.',
    )
    return ctx.wizard.next()
  },
  stepHandler,
)

const walletActions = 
  Markup.keyboard([
    ['üí∞ –ë–∞–ª–∞–Ω—Å', 'üí≥  –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
    ['üîô –ù–∞–∑–∞–¥']
  ]).oneTime().resize()

  bot.hears('üí∞ –ë–∞–ª–∞–Ω—Å', async (ctx) => {     
    const obj = await user.find({_id: ctx.from.id})
    const balance = obj.length > 0 ? obj[0].balance : 0
    ctx.replyWithHTML(`–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} —Ä—É–±–ª–µ–π`, walletActions)
  })
  bot.hears('üí≥  –ö–æ—à–µ–ª–µ–∫',(ctx) => ctx.replyWithHTML('–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá', walletActions))
  bot.on('pre_checkout_query', (ctx) => ctx.answerPreCheckoutQuery(true))
  bot.on('successful_payment', async (ctx) =>{
    const total_amount = ctx.message.successful_payment.total_amount
    const obj = await user.find({_id: ctx.from.id})
    const balance = (obj.length > 0 ? obj[0].balance : 0) + total_amount/100

    console.log(`–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞! –ë–∞–ª–∞–Ω—Å:${balance}`),
    
    //–ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id telegram, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ
    (async () => {
      await user.updateOne(
        {
          '_id': ctx.from.id
        },
        {
          '_id': ctx.from.id,
          'name': ctx.from.username,
          'balance': balance
        },
        { upsert: true })
      
    })()
  })

const stage = new Scenes.Stage<Scenes.WizardContext>([walletScene])
bot.use(session())
bot.use(stage.middleware())

bot.hears('üí≥  –ü–æ–ø–æ–ª–Ω–∏—Ç—å', async (ctx) => {
  ctx.scene.enter('wallet-scene')
  console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from.username} id: ${ctx.from.id}`)
})

}

export { Wallet }